// (Mostly) Generated by LiveScript 1.6.0
// Some parts hand-edited
(function(){
  var MESSAGES, out$ = typeof exports != 'undefined' && exports || this;
  $(function(){
    return this.app = new Vue({
      el: '#myapp'
    });
  });
  out$.MESSAGES = MESSAGES = ["If you're reading this, you could be a boy. Maybe you already are.", "If you're reading this, you could be a boy. Maybe you already are.", "Wanna be a boy? You're at the right place.", "Wanna be a boy? You're at the right place.", "Want to be a boy? We can help you get there.", "Want to be a boy? We can help you get there.", "If you want to be a boy, maybe you already are.", "If you want to be a boy, maybe you already are.", "It's okay to want to be a boy. You can get there.", "If any part of you wants to be a boy, we can help with that.", "Don't let your dreams be dreams!", "Don't let your dreams be dreams!", "Don't let your dreams be dreams!", "Don't let your dreams be dreams!", "You could totally be a boy if you wanted.", "You can be the kind of boy you wish you could be.", "Don't let anything stop you from living as your best self.", "Cracking eggs since 2018!", "This could be the start of the rest of your life.", "Hello again!", "Hello again!", "Fear doesn't have to stop you from living as your best self."];
  Vue.component('random-epithet', {
    template: '<div class="epithet">\n<h1>{{message}}</h1>\n</div>',
    data: function(){
      return {
        message: MESSAGES[Math.floor(Math.random() * MESSAGES.length)]
      };
    }
  });
  window.HideshowEvt = new Vue();
  Vue.component('hideshow', {
    template: '<div>\n  <div v-if="showme">\n    <slot />\n  </div>\n</div>',
    props: ['state'],
    data: function(){
      return {
        current_state: "init"
      };
    },
    computed: {
      showme: function(){
        return this.state === this.current_state;
      }
    },
    created: function(){
      var this$ = this;
      return HideshowEvt.$on('state', function(new_state){
        return this$.current_state = new_state;
      });
    }
  });
  Vue.component('turn-me-into-a-boy-button', {
    template: '<div>\n  <p>&nbsp;</p>\n  <div class="row center">\n    <a class="btn cancel" href="#" @click="cancelButton">\n      <i class="fas fa-undo"></i> No, wait! This isn&apos;t for me!\n    </a>\n    <br /><br />\n    <br />\n    <a class="btn tmiag" href="#" @click="continueButton" style="z-index: 99;">\n      <i class="far fa-heart" data-fa-transform="grow-8 down-2"></i>\n      &nbsp; I want to be a boy!\n    </a>\n  </div>\n  <p>&nbsp;</p>\n  <p>&nbsp;</p>\n</div>',
    methods: {
      continueButton: function(e){
        return HideshowEvt.$emit('state', 'showProgress');
      },
      cancelButton: function(e){
        HideshowEvt.$emit('state', 'showCancel');
        e.preventDefault();
        return this.state = "cancel";
      }
    }
  });
  Vue.component('heart-progress-bar', {
    template: '<div class="center wide-progress-bar">\n   <span v-for="i in parseInt(nhearts)-nSecLeft">\n      <span style="position: absolute; transform: translate(14px, 8px) scale(0.7); z-index: 9999;">\n      <particle-burst></particle-burst>\n      </span>\n      <i class="fas fa-heart" style="color: #4355da;" :data-fa-transform="transform[i]"></i>\n   </span>\n   <span v-for="i in nSecLeft">\n      <span class="pop-appear" :style="appear(i)" >\n          <i class="sinewave far fa-heart" :style="sine(i)" data-fa-transform="up-3"></i>\n      </span>\n   </span>\n</div>',
    props: ['nhearts', 'hearttime'],
    data: function(){
      var x;
      return {
        nSecLeft: parseInt(this.nhearts),
        transform: (function(){
          var i$, to$, results$ = [];
          for (i$ = 0, to$ = parseInt(this.nhearts); i$ <= to$; ++i$) {
            x = i$;
            results$.push("up-" + Math.floor(Math.random() * 5) + " rotate-" + Math.floor(Math.random() * 20 - 10) + " grow-16");
          }
          return results$;
        }.call(this))
      };
    },
    created: function(){
      var this$ = this;
      return setTimeout(function(){
        return this$.tick();
      }, 4000);
    },
    destroyed: function(){
      return console.log('destroy');
    },
    methods: {
      appear: function(i){
        return "animation-delay: " + (1 + i * 0.1) + "s;";
      },
      sine: function(i){
        return "color: #c6eaf5; animation-delay: " + i * -0.3 + "s;";
      },
      tick: function(){
        var ref$, this$ = this;
        console.log(this.nSecLeft);
        if (this.nSecLeft === 0) {
          return HideshowEvt.$emit('state', 'showComplete');
        } else {
          this.nSecLeft--;
          return setTimeout(function(){
            return this$.tick();
          }, parseInt(this.hearttime) * (this.nSecLeft === 1
            ? 4
            : 0 < (ref$ = this.nSecLeft) && ref$ < 5 ? 2 : 1));
        }
      }
    }
  });
  Vue.component('particle-burst', {
    template: '<span class="particle-field">\n  <span v-for="i in 8" :style="style(i)">\n    <span class="particle">&nbsp;</span>\n  </span>\n</span>',
    data: function(){
      return {
        offset: this.r()
      };
    },
    methods: {
      r: function(){
        return Math.random();
      },
      style: function(i){
        return "position: absolute; top: 50%; left: 50%; transform: rotate(" + (i + this.offset + 0.5 * this.r()) * 45 + "deg) scale(" + (0.5 + this.r()) + ");";
      }
    }
  });
}).call(this);